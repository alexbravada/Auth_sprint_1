"""empty message

Revision ID: ee248cefd914
Revises: 
Create Date: 2022-12-22 13:56:49.587899

"""
from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = 'ee248cefd914'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('resource',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('modified', sa.DateTime(), nullable=True),
                    sa.Column('resource_uuid', sa.String(length=256), nullable=False),
                    sa.Column('resource_type', sa.String(length=256), nullable=False),
                    sa.Column('name', sa.String(length=250), nullable=True),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('resource_uuid', 'resource_type', name='uuid__type_pk')
                    )
    op.create_table('role',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('modified', sa.DateTime(), nullable=True),
                    sa.Column('name', sa.String(length=128), nullable=False),
                    sa.Column('description', sa.String(length=256), nullable=True),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('resource__role',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('modified', sa.DateTime(), nullable=True),
                    sa.Column('role_id', sa.Integer(), nullable=True),
                    sa.Column('resource_id', sa.Integer(), nullable=True),
                    sa.Column('can_create', sa.Boolean(), nullable=False),
                    sa.Column('can_read', sa.Boolean(), nullable=False),
                    sa.Column('can_update', sa.Boolean(), nullable=False),
                    sa.Column('can_delete', sa.Boolean(), nullable=False),
                    sa.ForeignKeyConstraint(['resource_id'], ['resource.id'], ondelete='CASCADE'),
                    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
                    sa.PrimaryKeyConstraint('id')
                    )
    op.create_table('user_info',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('modified', sa.DateTime(), nullable=True),
                    sa.Column('email', sa.String(length=256), nullable=False),
                    sa.Column('username', sa.String(length=256), nullable=True),
                    sa.Column('first_name', sa.String(length=256), nullable=True),
                    sa.Column('last_name', sa.String(length=256), nullable=True),
                    sa.Column('password', sa.String(length=512), nullable=False),
                    sa.Column('is_active', sa.Boolean(), nullable=True),
                    sa.Column('is_verified', sa.Boolean(), nullable=True),
                    sa.Column('is_admin', sa.Boolean(), nullable=True),
                    sa.Column('is_adult', sa.Boolean(), nullable=True),
                    sa.Column('role_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('email'),
                    sa.UniqueConstraint('email', 'username', name='user_email_username_unique_constr')
                    )
    op.create_table('login_history',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('modified', sa.DateTime(), nullable=True),
                    sa.Column('login_time', sa.DateTime(), nullable=False),
                    sa.Column('useragent', sa.String(length=256), nullable=True),
                    sa.Column('device_type', sa.String(length=64), nullable=True),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['user_info.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', 'device_type'),
                    sa.UniqueConstraint('id', 'device_type'),
                    postgresql_partition_by='LIST (device_type)'
                    )
    op.create_table('social_account',
                    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
                    sa.Column('created', sa.DateTime(), nullable=False),
                    sa.Column('modified', sa.DateTime(), nullable=True),
                    sa.Column('user_id', sa.Integer(), nullable=False),
                    sa.Column('social_id', sa.Text(), nullable=False),
                    sa.Column('social_name', sa.Text(), nullable=False),
                    sa.ForeignKeyConstraint(['user_id'], ['user_info.id'], ondelete='CASCADE'),
                    sa.PrimaryKeyConstraint('id', 'social_name'),
                    sa.UniqueConstraint('id', 'social_name'),
                    sa.UniqueConstraint('social_id', 'social_name', name='social_pk'),
                    postgresql_partition_by='LIST (social_name)'
                    )
    # ### end Alembic commands ###
    op.execute("""CREATE TABLE IF NOT EXISTS "social_account_vk" PARTITION OF "social_account" FOR VALUES IN ('VK')""")
    op.execute(
        """CREATE TABLE IF NOT EXISTS "social_account_yandex" PARTITION OF "social_account" FOR VALUES IN ('YANDEX')""")
    op.execute(
        """CREATE TABLE IF NOT EXISTS "social_account_google" PARTITION OF "social_account" FOR VALUES IN ('GOOGLE')""")
    op.execute(
        """CREATE TABLE IF NOT EXISTS "login_history_smart" PARTITION OF "login_history" FOR VALUES IN ('smart')""")
    op.execute(
        """CREATE TABLE IF NOT EXISTS "login_history_mobile" PARTITION OF "login_history" FOR VALUES IN ('mobile')""")
    op.execute(
        """CREATE TABLE IF NOT EXISTS "login_history_tablet" PARTITION OF "login_history" FOR VALUES IN ('tablet')""")
    op.execute("""CREATE TABLE IF NOT EXISTS "login_history_pc" PARTITION OF "login_history" FOR VALUES IN ('pc')""")
    op.execute("""CREATE TABLE IF NOT EXISTS "login_history_bot" PARTITION OF "login_history" FOR VALUES IN ('bot')""")

    # add default role
    op.execute(
        """INSERT INTO public.role (id, created, modified, name, description) VALUES 
        (1::integer, NOW()::timestamp, null::timestamp, 'default role'::varchar(128), 'default role'::varchar(256))""")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('social_account')
    op.drop_table('login_history')
    op.drop_table('user_info')
    op.drop_table('resource__role')
    op.drop_table('role')
    op.drop_table('resource')
    # ### end Alembic commands ###
